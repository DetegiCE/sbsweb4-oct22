수학 객체 (Math)
Math.abs(숫자) -> 숫자의 절댓값
-5 => 5 -7 => 7 10 => 10
Math.max(숫자 여러개) => 최댓값
Math.max(1, 4, 5); => 5
Math.min(숫자 여러개) => 최솟값
Math.pow(밑 수, 거듭제곱 값) => 거듭제곱 (승 수)
Math.pow(2, 3) => 8 (2x2x2)
Math.random() => 0 이상 1 미만의 소수 랜덤 값
Math.ceil(숫자) => 소수의 올림 값
Math.floor(숫자) => 소수의 내림 값
Math.round(숫자) => 소수의 반올림 값
Math.sqrt(숫자) => 수의 제곱근 값
Math.PI => 원주율 값

Math.random() 을 이용해 0~10 사이의 수를 반환
Math.random()*11

기본 랜덤 0 이상 1 미만 *4
랜덤 0 이상 4 미만 + 1
랜덤 1 이상 5 미만
1~4

랜덤을 이용해서 가위바위보 게임을 만들어봅시다
랜덤을 이용해서 컴퓨터의 선택
(1 -> 가위, 2 -> 바위, 3 -> 보)
prompt 이용해서 사용자의 입력을 받고
switch-case 선택문을 이용해서 사용자의 선택과 컴퓨터의 선택에 따라 사용자가 이겼는지 졌는지 판단하기

0 이상 1 미만 * 3
0 이상 3 미만 + 1
1 이상 4 미만



배열 객체 (Array)
일반적인 변수는 값을 1개만 저장
배열 객체는 값을 여러 개 저장 할 수 있음

학생 정보
var stu_num = 20220101;
var stu_name = "홍길동";
var stu_grade = 3.8;

var stu_info = new Array(20220101, "홍길동", 3.8);
stu_info[1];

** 컴퓨터에서는 수를 0부터 세기 때문에 두번째 값은 1번 인덱스 값이다

new Array() 대신에 [] 로 단순화 시킬 수 있음

var stu_info = [20220101, "홍길동", 3.8];
배열에 들어있는 값들을 배열의 인덱스 번호 (0, 1, 2)와 반복문을 활용해서 확인해볼 수 있음

배열 함수들
배열.join(문자) -> 배열에 들어있는 값을 문자열로 묶어서 출력한다
배열.reverse() -> 배열의 순서를 뒤집는다.
배열.sort() -> 배열에 있는 데이터를 오름차순으로 정렬
배열.slice(인덱스1, 인덱스2) -> 지정한 구간만큼 잘라서 가져온다
배열.concat(다른 배열) -> 배열 뒤에 다른 배열의 값이 추가된다
배열.pop() -> 배열의 가장 마지막에 있는 값을 삭제
배열.push(값) -> 배열의 맨 마지막에 값을 추가
배열.shift() -> 배열의 첫번째 값을 삭제
배열.unshift(값) -> 배열의 맨 앞에 값을 추가

prompt로 입력받을 값의 개수를 입력
prompt로 입력받은 수 만큼 배열에 들어갈 값을 입력
입력한 값들을 배열에 넣어서 출력
배열을 내림차순 정렬하여 출력

prompt
4
서울역    -> 반복문 사용, 배열에 값 추가
회현
명동
충무로

출력
서울역,회현,명동,충무로
회현,충무로,서울역,명동   -> sort() + ???


문자열 객체 (String)
var a = new String("hello");
var a = "hello";

문자열.charAt(인덱스 번호) = 문자열[인덱스번호]
문자열.indexOf(찾을문자열) = 문자열에서 찾을 문자열이 있는 가장 첫 인덱스 번호
문자열.lastIndexOf(찾을문자열) = 문자열에서 찾을 문자열이 있는 가장 마지막 인덱스 번호
문자열.match(찾을문자열) = 문자열에서 찾을 문자열과 일치하는 문자열을 찾아서 제일 먼저 찾은 문자
문자열.replace(찾을문자열,바꿀문자열) = 문자열에서 찾을 문자열을 찾아서 통째로 바꿀 문자열로 교체
문자열.slice(인덱스1, 인덱스2) = 인덱스1부터 인덱스2 까지의 값을 자름
문자열.substring(인덱스1, 인덱스2)
문자열.substr(인덱스, 개수)
문자열.split(구분자) = 구분자로 문자열을 나눠서 배열에 저장
문자열.toLowerCase() -> 전부 소문자로
문자열.toUpperCase() -> 전부 대문자로
문자열.length -> 문자열의 길이
문자열.concat(다른문자열) -> 문자열에 다른 문자열 추가
문자열.trim() -> 문자열에서 "양끝의" 공백을 삭제

ASCII 코드: 미국정보교환표준부호 -> 컴퓨터나 통신 장비들의 문자를 숫자로 코드화 시킨것
'0' -> 48 '1' -> 49 '2' -> 50
'A' -> 65 'B' -> 66
'a' -> 97 'b' -> 98

문자열.charCodeAt(인덱스) -> 문자열에서 해당인덱스의 아스키코드
String.fromCharCode(아스키코드) -> 해당 아스키코드에 해당하는 문자

한글: '가' -> 44032 ~ '힣' -> 55203
조합형 한글 유니코드
초성: ㄱ, ㄲ, ㄴ, ㄷ, ㄸ, ㄹ, ㅁ, ㅂ, ㅃ, ㅅ, ㅆ, ㅇ, ㅈ, ㅉ, ㅊ, ㅋ, ㅌ, ㅍ, ㅎ (0~18)
중성: ㅏ, ㅐ, ㅑ, ㅒ, ㅓ, ㅔ, ㅕ, ㅖ, ㅗ, ㅘ, ㅙ, ㅚ, ㅛ, ㅜ, ㅝ, ㅞ, ㅟ, ㅠ, ㅡ, ㅢ, ㅣ (0~20)
종성: X, ㄱ, ㄲ, ㄳ, ㄴ, ㄵ, ㄶ, ㄷ, ㄹ, ㄺ, ㄻ, ㄼ, ㄽ, ㄾ, ㄿ, ㅀ, ㅁ, ㅂ, ㅄ, ㅅ, ㅆ, ㅇ, ㅈ, ㅊ, ㅋ, ㅌ, ㅍ, ㅎ (0~27)
44032 + 초성번호 * 588 + 중성번호 * 28 + 종성번호
김: 44032 + 0 * 588 + 20 * 28 + 16

이메일 체크하기
prompt를 이용해서 이메일 주소를 입력받습니다
입력받은 값에 대해서 유효한 이메일인지 확인
조건 1: @있어야 한다
조건 2: @ 앞에 적어도 3자리 이상의 문자
조건 3: .co.kr, .com, .net 으로 끝나야 한다
조건 4: 조건 3의 문자를 제외한 나머지 문자의 개수가 3개 이상이어야 한다
조건 4개 모두 충족하면 "유효한 이메일입니다"
하나라도 만족 못하면 "유효하지 않은 이메일입니다" 