이메일 체크하기
prompt를 이용해서 이메일 주소를 입력받습니다
입력받은 값에 대해서 유효한 이메일인지 확인
조건 1: @있어야 한다
조건 2: @ 앞에 적어도 3자리 이상의 문자
조건 3: .co.kr, .com, .net 으로 끝나야 한다
조건 4: 조건 3의 문자를 제외한 나머지 문자의 개수가 3개 이상이어야 한다
조건 4개 모두 충족하면 "유효한 이메일입니다"
하나라도 만족 못하면 "유효하지 않은 이메일입니다" 

AAA@naver.com => 3
gadfklajgkaj@gmail.com => 12

abc@naver.com


브라우저 객체 모델 (BOM)
window (브라우저 창)
- document (html 문서)
- screen
- location
- history
- navigator


window 객체 (창을 다루는 객체)
- open(URL, 이름, 옵션) = 새 창으로 url로 이동시킨다 (팝업창 띄우기)
옵션 = width(너비), height(높이), left(화면에서 왼쪽에서부터 얼마나 위치), top(화면에서 위에서부터 얼마나 위치), scrollbars(스크롤바를 보일거냐?(yes, no))
- alert(메시지) = 경고 창을 띄운다.
- prompt(질문, 답변) = 질의응답 창을 띄운다.
- confirm(질문) = 확인/취소 창을 띄운다
- setInterval, setTimeout (일정한 시간 간격으로 코드를 실행한다)
var 변수 = setInterval(function() { 코드 }, 시간간격(ms));

var interval = setInterval(function() {
            document.write("안녕하세요!<br>");
}, 500);
500ms 마다 창에 안녕하세요 글씨를 쓴다

setInterval은 clearInterval을 통해서 멈출 수 있다.
clearInterval(setInterval 변수);
- console.log(메시지): 크롬의 콘솔 창에 로그를 남기는 함수

setInterval과 별도의 변수를 활용해서 1부터 점점 커지는데 글씨크기도 1부터 점점 커지도록 하는 사이트를 만들어봅시다.
출력 간격은 1000ms (1초), i값이 50에 도달하면 자동으로 코드가 멈추도록

- setTimeout: 일정 시간이 지나면 코드를 실행하고 종료한다

var 변수 = setTimeout(function() { 코드 }, 시간간격(ms));
clearTimeout(변수) -> setTimeout를 취소시킨다



screen 객체 
-> 사용자의 모니터 정보를 가져오는 객체
screen.width -> 화면의 너비
screen.height -> 화면의 높이
screen.availWidth -> 작업표시줄을 제외한 화면의 너비
screen.availHeight -> 작업표시줄을 제외한 화면의 높이
screen.colorDepth -> 모니터의 컬러 비트 수
0~255 rgb => 255 = 2^8 - 1 (=8비트)


location 객체
-> 사용자의 브라우저와 관련된 속성
location.href => 사용자의 URL을 통째로 가져오기
~.hash => url에서 # 뒤의 값
~.hostname => url에서 주소 값만
~.host => 주소 + 포트 번호
~.protocol => // 앞의 값
~.search => ? 뒤의 값 (쿼리)
~.reload() => 새로 고침

Date 객체 + 새로 고침 + setTimeout 을 이용해서 현재 시간을 1초마다 계속 바뀌도록 설정하는 코드

2022-10-18 11:51:01
2022-10-18 11:51:02
2022-10-18 11:51:03
....
=> 새로 고침되면서 딱 한 줄로만 날짜+시간이 나오도록


history 객체
-> 사용자의 방문한 사이트 기록 (이전 방문 사이트, 다음 방문 사이트로 이동 가능하도록)
history.back() -> 이전 방문 사이트로 이동
~.forward() -> 다음 방문 사이트로 이동
~.go(숫자) -> n단계 이전/다음으로 이동
 (.go(-2) -> 2단계 이전 사이트, .go(3) -> 3단계 다음 사이트)
~.length -> 방문 기록의 길이

naver.com         <= history.go(-3)
naver.com/login
naver.com/cafe  <= history.back()
naver.com/blog  <= 현재 상태
gmail.com          <= history.forward()
sbsart.com
sbsart.com/portfolio <= history.go(3)


*** navigator 객체 ***
- 현재 사이트 방문자가 사용하는 브라우저 정보/운영체제 정보

크롬 콘솔 창에서 navigator.userAgent를 쳐보면 현재 방문자(나)의 브라우저와 운영체제 정보를 알 수 있음

PC크롬 : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36

PC엣지 : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.47

iPhone 12 Pro 크롬 : Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1

갤럭시 폴드 크롬 : Mozilla/5.0 (Linux; Android 9.0; SAMSUNG SM-F900U Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Mobile Safari/537.36

플랫폼 정보 ( 운영체제 정보 ) 브라우저 엔진 정보, 브라우저의 이름, 호환 가능한 브라우저 이름

navigator.appCodeName => 플랫폼 정보 (코드명)
navigator.appName => 브라우저의 이름
~.appVersion => 브라우저의 버전 정보
~.language => 브라우저의 언어
https://www.andiamo.co.uk/resources/iso-language-codes/
 ko-KR => 한국어-대한민국
 ja-JP => 일본어-일본
 en-US => 영어-미국
 en-GB => 영어-영국
 en-IE => 영어-아일랜드
 zh-HK => 중국어-홍콩
~.product => 엔진 이름
~.platform => 운영체제 정보
~.onLine => 현재 인터넷 연결 여부


navigator 객체와 screen 객체를 활용해서 현재 사용자의 OS(윈도우, 맥, 아이폰, 안드로이드)와 창의 크기를 출력하는 프로그램을 만들어봅시다.

OS는 글씨로 출력하는게 아닌 OS에 따른 사진

navigator.userAgent
윈도우 -> Windows
맥 -> Macintosh
아이폰 -> iPhone
안드로이드 -> Android